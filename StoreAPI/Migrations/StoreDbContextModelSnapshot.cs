// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreAPI;

#nullable disable

namespace StoreAPI.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    partial class StoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StoreAPI.Models.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BillingEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BillingName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("StoreAPI.Models.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SystemUserId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SystemUserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("StoreAPI.Models.Entities.OrderProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("StoreAPI.Models.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Calzado típico de León",
                            Name = "Zapatos de piel",
                            Price = 1200.0,
                            StoreId = 4
                        },
                        new
                        {
                            Id = 2,
                            Description = "Artesanía local",
                            Name = "Bolsa de cuero",
                            Price = 950.0,
                            StoreId = 4
                        },
                        new
                        {
                            Id = 3,
                            Description = "Comida rápida",
                            Name = "Hamburguesa doble",
                            Price = 120.0,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Especialidad italiana",
                            Name = "Pizza familiar",
                            Price = 220.0,
                            StoreId = 2
                        },
                        new
                        {
                            Id = 5,
                            Description = "Taza grande",
                            Name = "Café americano",
                            Price = 45.0,
                            StoreId = 3
                        },
                        new
                        {
                            Id = 6,
                            Description = "Bebida refrescante",
                            Name = "Refresco 600ml",
                            Price = 20.0,
                            StoreId = 5
                        });
                });

            modelBuilder.Entity("StoreAPI.Models.Entities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Store");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Plaza Mayor León",
                            Latitude = 21.154,
                            Longitude = -101.69459999999999
                        },
                        new
                        {
                            Id = 2,
                            Description = "Centro Max",
                            Latitude = 21.094799999999999,
                            Longitude = -101.6417
                        },
                        new
                        {
                            Id = 3,
                            Description = "Plaza Galerías Las Torres",
                            Latitude = 21.121099999999998,
                            Longitude = -101.6613
                        },
                        new
                        {
                            Id = 4,
                            Description = "Outlet Mulza",
                            Latitude = 21.0459,
                            Longitude = -101.58620000000001
                        },
                        new
                        {
                            Id = 5,
                            Description = "La Gran Plaza León",
                            Latitude = 21.128,
                            Longitude = -101.6827
                        },
                        new
                        {
                            Id = 6,
                            Description = "Altacia",
                            Latitude = 21.128,
                            Longitude = -102.0
                        });
                });

            modelBuilder.Entity("StoreAPI.Models.Entities.SystemUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNaame")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemUser");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Hassiel@gmail.com",
                            FirstNaame = "Hassiel",
                            LastName = "Monjaraz",
                            Password = "Hassiel"
                        });
                });

            modelBuilder.Entity("StoreAPI.Models.Entities.Invoice", b =>
                {
                    b.HasOne("StoreAPI.Models.Entities.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("StoreAPI.Models.Entities.Order", b =>
                {
                    b.HasOne("StoreAPI.Models.Entities.SystemUser", "SystemUser")
                        .WithMany("Orders")
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("StoreAPI.Models.Entities.OrderProduct", b =>
                {
                    b.HasOne("StoreAPI.Models.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreAPI.Models.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StoreAPI.Models.Entities.Product", b =>
                {
                    b.HasOne("StoreAPI.Models.Entities.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("StoreAPI.Models.Entities.Order", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("StoreAPI.Models.Entities.Store", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("StoreAPI.Models.Entities.SystemUser", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
